<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft fxcop 1.36\Xml\FxCopReport.xsl"?>
<FxCopReport Version="1.36">
 <Namespaces>
  <Namespace Name="UIAutomation.Commands.Pattern">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'UIAutomation.Commands.Pattern' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="E:\G\Projects\PS\UIAutomation\UIAutomation\bin\Release\UIAutomation.dll">
   <Modules>
    <Module Name="uiautomation.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'UIAutomation.dll' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'UIAutomation.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'UIAutomation.dll' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="UIAutomation">
       <Types>
        <Type Name="CommonCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.CommonCmdletBase()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_window" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CommonCmdletBase._window' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#aeCtrl" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CommonCmdletBase.aeCtrl' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BeginProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CmdletName(UIAutomation.CommonCmdletBase)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">The 'this' parameter (or 'Me' in Visual Basic) of 'CommonCmdletBase.CmdletName(CommonCmdletBase)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EndProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.EndProcessing()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getControl(UIAutomation.GetControlCmdletBase)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.getControl(GetControlCmdletBase)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.getControl(GetControlCmdletBase)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'CommonCmdletBase.getControl(GetControlCmdletBase)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.getControl(GetControlCmdletBase)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getControlConditions(UIAutomation.GetControlCmdletBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.getControlConditions(GetControlCmdletBase)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.getControlConditions(GetControlCmdletBase)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator !=(string, string)' in 'CommonCmdletBase.getControlConditions(GetControlCmdletBase)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator !=(string, string)' in 'CommonCmdletBase.getControlConditions(GetControlCmdletBase)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator !=(string, string)' in 'CommonCmdletBase.getControlConditions(GetControlCmdletBase)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#rootElement" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CommonCmdletBase.rootElement' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#runSBAction(System.Management.Automation.ScriptBlock,System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.runSBAction(ScriptBlock, AutomationElement, AutomationEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#runSBEvent(System.Management.Automation.ScriptBlock,System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.runSBEvent(ScriptBlock, AutomationElement, AutomationEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.runSBEvent(ScriptBlock, AutomationElement, AutomationEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.runSBEvent(ScriptBlock, AutomationElement, AutomationEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#runScriptBlocks(System.Collections.Generic.List`1&lt;System.Management.Automation.ScriptBlock&gt;,UIAutomation.HasScriptBlockCmdletBase,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.runScriptBlocks(List&lt;ScriptBlock&gt;, HasScriptBlockCmdletBase, bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.runScriptBlocks(List&lt;ScriptBlock&gt;, HasScriptBlockCmdletBase, bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#startDate" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CommonCmdletBase.startDate' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteDebug(UIAutomation.CommonCmdletBase,System.Object)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'CommonCmdletBase.WriteDebug(CommonCmdletBase, object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteError(UIAutomation.CommonCmdletBase,System.Management.Automation.ErrorRecord,System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteError(CommonCmdletBase, ErrorRecord, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteError(CommonCmdletBase, ErrorRecord, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteError(CommonCmdletBase, ErrorRecord, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteError(CommonCmdletBase, ErrorRecord, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteError(CommonCmdletBase, ErrorRecord, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#writeErrorToTheList(System.Management.Automation.ErrorRecord)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">The 'this' parameter (or 'Me' in Visual Basic) of 'CommonCmdletBase.writeErrorToTheList(ErrorRecord)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteLog(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.WriteLog(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteObject(UIAutomation.CommonCmdletBase,System.Object)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'cmdlet', a parameter, is cast to type 'HasScriptBlockCmdletBase' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning">'obj', a parameter, is cast to type 'AutomationElement' multiple times in method 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'CommonCmdletBase.WriteObject(CommonCmdletBase, object)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteVerbose(UIAutomation.CommonCmdletBase,System.Object)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.WriteVerbose(CommonCmdletBase, object)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'CommonCmdletBase.WriteVerbose(CommonCmdletBase, object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteVerbose(UIAutomation.CommonCmdletBase,System.String)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'CommonCmdletBase.WriteVerbose(CommonCmdletBase, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CurrentData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Error" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'CurrentData.Error' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestResults" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;TestResult&gt;' in 'CurrentData.TestResults' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning">'EventCmdletBase.EventCmdletBase()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;EventCmdletBase..ctor()&#xD;&#xA;HasControlInputCmdletBase.set_InputObject(AutomationElement):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EventAction" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'EventCmdletBase.EventAction' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnErrorScreenShot" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_OnErrorScreenShot()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'EventCmdletBase.OnErrorScreenShot.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'EventCmdletBase.OnErrorScreenShot.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasScriptBlockCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_OnErrorScreenShot(System.Management.Automation.SwitchParameter)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'EventCmdletBase.OnErrorScreenShot.set(SwitchParameter)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'EventCmdletBase.OnErrorScreenShot.set(SwitchParameter)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasScriptBlockCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#OnUIAutomationEvent(System.Object,System.Windows.Automation.AutomationEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'EventCmdletBase.OnUIAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError">Consider making 'EventCmdletBase.OnUIAutomationEvent(object, AutomationEventArgs)' not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnUIAutomationPropertyChangedEvent(System.Object,System.Windows.Automation.AutomationPropertyChangedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error">Consider changing the type of parameter 'e' in 'EventCmdletBase.OnUIAutomationPropertyChangedEvent(object, AutomationPropertyChangedEventArgs)' from 'AutomationPropertyChangedEventArgs' to its base type 'AutomationEventArgs'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'EventCmdletBase.OnUIAutomationPropertyChangedEvent(object, AutomationPropertyChangedEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError">Consider making 'EventCmdletBase.OnUIAutomationPropertyChangedEvent(object, AutomationPropertyChangedEventArgs)' not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnUIStructureChangedEvent(System.Object,System.Windows.Automation.StructureChangedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error">Consider changing the type of parameter 'e' in 'EventCmdletBase.OnUIStructureChangedEvent(object, StructureChangedEventArgs)' from 'StructureChangedEventArgs' to its base type 'AutomationEventArgs'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'EventCmdletBase.OnUIStructureChangedEvent(object, StructureChangedEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError">Consider making 'EventCmdletBase.OnUIStructureChangedEvent(object, StructureChangedEventArgs)' not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnUIWindowClosedEvent(System.Object,System.Windows.Automation.WindowClosedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error">Consider changing the type of parameter 'e' in 'EventCmdletBase.OnUIWindowClosedEvent(object, WindowClosedEventArgs)' from 'WindowClosedEventArgs' to its base type 'AutomationEventArgs'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'EventCmdletBase.OnUIWindowClosedEvent(object, WindowClosedEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError">Consider making 'EventCmdletBase.OnUIWindowClosedEvent(object, WindowClosedEventArgs)' not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PassThru" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_PassThru()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetCmdletBase.PassThru.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetCmdletBase.PassThru.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_PassThru(System.Management.Automation.SwitchParameter)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetCmdletBase.PassThru.set(SwitchParameter)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetCmdletBase.PassThru.set(SwitchParameter)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GetControlCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning">'GetControlCmdletBase.GetControlCmdletBase()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;GetControlCmdletBase..ctor()&#xD;&#xA;HasControlInputCmdletBase.set_InputObject(AutomationElement):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetWindowCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InputObject" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_InputObject()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetWindowCmdletBase.InputObject.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetWindowCmdletBase.InputObject.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_InputObject(System.Windows.Automation.AutomationElement)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetWindowCmdletBase.InputObject.set(AutomationElement)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetWindowCmdletBase.InputObject.set(AutomationElement)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Global" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'Global.Global()' initializes field 'Global.GTranscript' of type 'bool' to false. Remove this initialization because it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_MinimizeRectangle()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Global._MinimizeRectangle()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_PaintRectangle(System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Global._PaintRectangle(AutomationElement)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Global._PaintRectangle(AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CloseLogFile()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Global.CloseLogFile()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateLogFile()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Global.CreateLogFile()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'Global.CreateLogFile()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HasControlInputCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning">'HasControlInputCmdletBase.HasControlInputCmdletBase()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;HasControlInputCmdletBase..ctor()&#xD;&#xA;HasControlInputCmdletBase.set_InputObject(AutomationElement):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning">'HasControlInputCmdletBase.HasControlInputCmdletBase()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;HasControlInputCmdletBase..ctor()&#xD;&#xA;HasControlInputCmdletBase.set_PassThru(SwitchParameter):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckControl(UIAutomation.HasControlInputCmdletBase)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'HasControlInputCmdletBase.CheckControl(HasControlInputCmdletBase)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClickControl(UIAutomation.HasControlInputCmdletBase,System.Windows.Automation.AutomationElement,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error">Consider changing the type of parameter 'cmdlet' in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' from 'HasControlInputCmdletBase' to its base type 'CommonCmdletBase'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.IntPtr" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning">'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' creates a new instance of 'IntPtr' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning">'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' creates a new instance of 'IntPtr' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning">'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' creates a new instance of 'IntPtr' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning">'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' creates a new instance of 'IntPtr' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError">'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' calls into 'Process.GetProcessById(int)' which has a LinkDemand. By making this call, 'Process.GetProcessById(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)'&#xD;&#xA;   -&gt;'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)'</Issue>
             <Issue Certainty="33" Level="CriticalError">'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' calls into 'Process.MainWindowHandle.get()' which has a LinkDemand. By making this call, 'Process.MainWindowHandle.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)'&#xD;&#xA;   -&gt;'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)'</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Alt" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Alt' in parameter name 'Alt' by changing it to 'alt'.</Issue>
            </Message>
            <Message Id="Ctrl" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Ctrl' in parameter name 'Ctrl' by changing it to 'ctrl'.</Issue>
            </Message>
            <Message Id="Double" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Double' in parameter name 'DoubleClick' by changing it to 'double'.</Issue>
            </Message>
            <Message Id="Mid" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Mid' in parameter name 'MidClick' by changing it to 'mid'.</Issue>
            </Message>
            <Message Id="Relative" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Relative' in parameter name 'RelativeX' by changing it to 'relative'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Relative' in parameter name 'RelativeY' by changing it to 'relative'.</Issue>
            </Message>
            <Message Id="Right" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Right' in parameter name 'RightClick' by changing it to 'right'.</Issue>
            </Message>
            <Message Id="Shift" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)', correct the casing of 'Shift' in parameter name 'Shift' by changing it to 'shift'.</Issue>
            </Message>
            <Message Id="Alt" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">Parameter 'Alt' of 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.UInt32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'uint.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'uint.ToString(IFormatProvider)'. If the result of 'uint.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'uint.ToString()' could vary based on the current user's locale settings, replace this call in 'HasControlInputCmdletBase.ClickControl(HasControlInputCmdletBase, AutomationElement, bool, bool, bool, bool, bool, bool, bool, int, int)' with a call to 'uint.ToString(IFormatProvider)'. If the result of 'uint.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetColorProbe(UIAutomation.HasControlInputCmdletBase,System.Windows.Automation.AutomationElement)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">The 'this' parameter (or 'Me' in Visual Basic) of 'HasControlInputCmdletBase.GetColorProbe(HasControlInputCmdletBase, AutomationElement)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="cmdlet" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">Parameter 'cmdlet' of 'HasControlInputCmdletBase.GetColorProbe(HasControlInputCmdletBase, AutomationElement)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="element" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">Parameter 'element' of 'HasControlInputCmdletBase.GetColorProbe(HasControlInputCmdletBase, AutomationElement)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyState(System.UInt32)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'HasControlInputCmdletBase.GetKeyState(uint)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'HasControlInputCmdletBase.GetKeyState(uint)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#INPUT_HARDWARE" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.INPUT_HARDWARE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#INPUT_KEYBOARD" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.INPUT_KEYBOARD'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#INPUT_MOUSE" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.INPUT_MOUSE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#keybd_event(System.Byte,System.Byte,System.UInt32,System.Int32)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Vk" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.keybd_event(byte, byte, uint, int)', correct the casing of 'Vk' in parameter name 'bVk' by changing it to 'VK'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.keybd_event(byte, byte, uint, int)'.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'HasControlInputCmdletBase.keybd_event(byte, byte, uint, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'dwExtraInfo' of P/Invoke 'HasControlInputCmdletBase.keybd_event(byte, byte, uint, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'HasControlInputCmdletBase.keybd_event(byte, byte, uint, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'HasControlInputCmdletBase.keybd_event(byte, byte, uint, int)', replace the term 'Flags' in parameter name 'dwFlags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KEYEVENTF_EXTENDEDKEY" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.KEYEVENTF_EXTENDEDKEY'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KEYEVENTF_KEYUP" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.KEYEVENTF_KEYUP'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KEYEVENTF_SCANCODE" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.KEYEVENTF_SCANCODE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KEYEVENTF_UNICODE" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'HasControlInputCmdletBase.KEYEVENTF_UNICODE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MK_CONTROL" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.MK_CONTROL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MK_LBUTTON" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.MK_LBUTTON' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MK_MBUTTON" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.MK_MBUTTON' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MK_RBUTTON" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.MK_RBUTTON' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MK_SHIFT" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.MK_SHIFT' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostMessage1(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.PostMessage1(IntPtr, uint, IntPtr, IntPtr)', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'HasControlInputCmdletBase.PostMessage1(IntPtr, uint, IntPtr, IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'HasControlInputCmdletBase.PostMessage1(IntPtr, uint, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'HasControlInputCmdletBase.PostMessage1(IntPtr, uint, IntPtr, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendInput(System.UInt32,UIAutomation.INPUT,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'HasControlInputCmdletBase.SendInput(uint, INPUT, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'HasControlInputCmdletBase.SendInput(uint, INPUT, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="1" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'pInputs' of P/Invoke 'HasControlInputCmdletBase.SendInput(uint, INPUT, int)' will be 28 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'INPUT'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage1(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.SendMessage1(IntPtr, uint, IntPtr, IntPtr)', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'HasControlInputCmdletBase.SendMessage1(IntPtr, uint, IntPtr, IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'HasControlInputCmdletBase.SendMessage1(IntPtr, uint, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'HasControlInputCmdletBase.SendMessage1(IntPtr, uint, IntPtr, IntPtr)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'bool'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'HasControlInputCmdletBase.SendMessage1(IntPtr, uint, IntPtr, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCursorPos(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.SetCursorPos(int, int)', correct the casing of 'X' in parameter name 'X' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="Y" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'HasControlInputCmdletBase.SetCursorPos(int, int)', correct the casing of 'Y' in parameter name 'Y' by changing it to 'y'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'HasControlInputCmdletBase.SetCursorPos(int, int)', consider providing a more meaningful name than parameter name 'X'.</Issue>
            </Message>
            <Message Id="Y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'HasControlInputCmdletBase.SetCursorPos(int, int)', consider providing a more meaningful name than parameter name 'Y'.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'HasControlInputCmdletBase.SetCursorPos(int, int)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'HasControlInputCmdletBase.SetCursorPos(int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'HasControlInputCmdletBase.SetCursorPos(int, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VK_CONTROL" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.VK_CONTROL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VK_LCONTROL" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.VK_LCONTROL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VK_LSHIFT" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.VK_LSHIFT' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VK_RCONTROL" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.VK_RCONTROL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VK_RSHIFT" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.VK_RSHIFT' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VK_SHIFT" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.VK_SHIFT' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_KEYDOWN" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_KEYDOWN' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_KEYUP" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_KEYUP' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_LBUTTONDBLCLK" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_LBUTTONDBLCLK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_LBUTTONDOWN" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_LBUTTONDOWN' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_LBUTTONUP" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_LBUTTONUP' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_MBUTTONDBLCLK" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_MBUTTONDBLCLK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_MBUTTONDOWN" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_MBUTTONDOWN' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_MBUTTONUP" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_MBUTTONUP' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_MOUSEACTIVATE" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_MOUSEACTIVATE' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_RBUTTONDBLCLK" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_RBUTTONDBLCLK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_RBUTTONDOWN" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_RBUTTONDOWN' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_RBUTTONUP" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_RBUTTONUP' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_SYSKEYDOWN" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_SYSKEYDOWN' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_SYSKEYUP" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasControlInputCmdletBase.WM_SYSKEYUP' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HasScriptBlockCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#checkNotNull(System.Object,System.Windows.Automation.AutomationEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.checkNotNull(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'HasScriptBlockCmdletBase.checkNotNull(object, AutomationEventArgs)', consider replacing the data type identifier 'object' in parameter name 'objectToTest' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError">Consider making 'HasScriptBlockCmdletBase.checkNotNull(object, AutomationEventArgs)' not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ElementToSubscribe" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasScriptBlockCmdletBase.ElementToSubscribe' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EventAction" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_EventAction()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'HasScriptBlockCmdletBase.EventAction.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_EventAction(System.Management.Automation.ScriptBlock[])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'HasScriptBlockCmdletBase.EventAction.set(ScriptBlock[])' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetActiveWindow()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.GetActiveWindow()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HasScriptBlockCmdletBase.GetActiveWindow()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'HasScriptBlockCmdletBase.GetActiveWindow()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetForegroundWindow()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'HasScriptBlockCmdletBase.GetForegroundWindow()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnErrorAction" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'HasScriptBlockCmdletBase.OnErrorAction' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSuccessAction" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'HasScriptBlockCmdletBase.OnSuccessAction' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnUIRecordingAutomationEvent(System.Object,System.Windows.Automation.AutomationEventArgs)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning">'src', a parameter, is cast to type 'AutomationElement' multiple times in method 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError">Consider making 'HasScriptBlockCmdletBase.OnUIRecordingAutomationEvent(object, AutomationEventArgs)' not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#subscribedEvents" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasScriptBlockCmdletBase.subscribedEvents' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#subscribedEventsIds" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HasScriptBlockCmdletBase.subscribedEventsIds' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SubscribeToEvents(UIAutomation.CommonCmdletBase,System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationProperty,System.Windows.Automation.AutomationEventHandler)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error">Consider changing the type of parameter 'eventType' in 'HasScriptBlockCmdletBase.SubscribeToEvents(CommonCmdletBase, AutomationElement, AutomationEvent, AutomationProperty, AutomationEventHandler)' from 'AutomationEvent' to its base type 'AutomationIdentifier'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'HasScriptBlockCmdletBase.SubscribeToEvents(CommonCmdletBase, AutomationElement, AutomationEvent, AutomationProperty, AutomationEventHandler)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HasTimeoutCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning">'HasTimeoutCmdletBase.HasTimeoutCmdletBase()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;HasTimeoutCmdletBase..ctor()&#xD;&#xA;HasScriptBlockCmdletBase.set_OnErrorScreenShot(SwitchParameter):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSleepAction" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'HasTimeoutCmdletBase.OnSleepAction' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Seconds" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Seconds(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value*1000" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'value*1000' in 'HasTimeoutCmdletBase.Seconds.set(int)'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Highlighter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'Highlighter' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning">Change 'Highlighter.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error">Modify 'Highlighter.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPhysicalCursorPos(UIAutomation.Highlighter+CursorPoint&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Highlighter.GetPhysicalCursorPos(ref Highlighter.CursorPoint)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Highlighter.GetPhysicalCursorPos(ref Highlighter.CursorPoint)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Highlighter.GetPhysicalCursorPos(ref Highlighter.CursorPoint)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getPoint(System.Windows.Automation.AutomationElement)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">The 'this' parameter (or 'Me' in Visual Basic) of 'Highlighter.getPoint(AutomationElement)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PhysicalToLogicalPoint(System.IntPtr,UIAutomation.Highlighter+CursorPoint&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Highlighter.PhysicalToLogicalPoint(IntPtr, ref Highlighter.CursorPoint)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Highlighter.PhysicalToLogicalPoint(IntPtr, ref Highlighter.CursorPoint)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Highlighter+CursorPoint" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Highlighter.CursorPoint'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Highlighter.CursorPoint' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Highlighter.CursorPoint' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#X" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Highlighter.CursorPoint.X' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'Highlighter.CursorPoint.X'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Highlighter.CursorPoint.Y' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'Highlighter.CursorPoint.Y'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Mode" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Profile" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Profile(UIAutomation.Modes)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error">'Mode.Profile.set(Modes)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="MOUSEKEYBDHARDWAREINPUT" Kind="Struct" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Hardware" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'MOUSEKEYBDHARDWAREINPUT.Hardware' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Keyboard" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'MOUSEKEYBDHARDWAREINPUT.Keyboard' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mouse" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'MOUSEKEYBDHARDWAREINPUT.Mouse' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OutAndConvertFromCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PassThru" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_PassThru()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'OutAndConvertFromCmdletBase.PassThru.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'OutAndConvertFromCmdletBase.PassThru.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_PassThru(System.Management.Automation.SwitchParameter)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'OutAndConvertFromCmdletBase.PassThru.set(SwitchParameter)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'OutAndConvertFromCmdletBase.PassThru.set(SwitchParameter)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PatternCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'PatternCmdletBase.ProcessRecord()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Preferences" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnErrorAction" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Preferences.OnErrorAction' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSleepAction" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Preferences.OnSleepAction' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSuccessAction" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Preferences.OnSuccessAction' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Side" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning">Change 'Side.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TranscriptCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#lastRecordedItem" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TranscriptCmdletBase.lastRecordedItem' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PassThru" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_PassThru()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'TranscriptCmdletBase.PassThru.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'TranscriptCmdletBase.PassThru.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_PassThru(System.Management.Automation.SwitchParameter)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'TranscriptCmdletBase.PassThru.set(SwitchParameter)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'TranscriptCmdletBase.PassThru.set(SwitchParameter)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#recordingPatterns" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TranscriptCmdletBase.recordingPatterns' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StopProcessing()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Make 'TranscriptCmdletBase.StopProcessing()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'Cmdlet'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#thePreviouslyUsedElement" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TranscriptCmdletBase.thePreviouslyUsedElement' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UIAHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'UIAHelper.UIAHelper()' initializes field 'UIAHelper.element' of type 'AutomationElement' to null. Remove this initialization because it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning">'UIAHelper.UIAHelper()' initializes field 'UIAHelper.errorInTheGatheringCycle' of type 'bool' to false. Remove this initialization because it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning">'UIAHelper.UIAHelper()' initializes field 'UIAHelper.errorInTheInnerCycle' of type 'bool' to false. Remove this initialization because it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning">'UIAHelper.UIAHelper()' initializes field 'UIAHelper.highlighter' of type 'Highlighter' to null. Remove this initialization because it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UIAHelper.BitBlt(IntPtr, int, int, int, int, IntPtr, int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UIAHelper.BitBlt(IntPtr, int, int, int, int, IntPtr, int, int, int)' will be 8 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'ulong'.</Issue>
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UIAHelper.BitBlt(IntPtr, int, int, int, int, IntPtr, int, int, int)' will be 8 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'ulong'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#collectAncestors(UIAutomation.TranscriptCmdletBase,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.collectAncestors(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.collectAncestors(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.collectAncestors(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.collectAncestors(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#errorMessageInTheInnerCycle" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UIAHelper.errorMessageInTheInnerCycle' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UIAHelper.FindWindowEx(IntPtr, IntPtr, string, string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszClass' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="3" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszWindow' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAncestorWithHandle(System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.GetAncestorWithHandle(AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAutomationElementFromPoint()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.GetAutomationElementFromPoint()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'UIAHelper.GetAutomationElementFromPoint()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetControlByTitle(System.Windows.Automation.AutomationElement,System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.GetControlByTitle(AutomationElement, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetControlScreenshot(System.Windows.Automation.AutomationElement,System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="UIAutomation.UIAHelper.SendMessage(System.IntPtr,System.Int32,System.IntPtr,UIAutomation.UIAHelper+DrawingOptions)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning">'UIAHelper.GetControlScreenshot(AutomationElement, string)' calls 'UIAHelper.SendMessage(IntPtr, int, IntPtr, UIAHelper.DrawingOptions)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError">'UIAHelper.GetControlScreenshot(AutomationElement, string)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UIAHelper.GetControlScreenshot(AutomationElement, string)'&#xD;&#xA;   -&gt;'UIAHelper.GetControlScreenshot(AutomationElement, string)'&#xD;&#xA;   -&gt;'GetUIAScreenshotCommand.ProcessRecord()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetControlTypeByTypeName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetControlTypeByTypeName(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCurrentPattern(System.Windows.Automation.AutomationElement&amp;,System.Windows.Automation.AutomationPattern)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.GetCurrentPattern(ref AutomationElement, AutomationPattern)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDesktopScreenshot(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError">'UIAHelper.GetDesktopScreenshot(string)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'CommonCmdletBase.getControl(GetControlCmdletBase)'</Issue>
             <Issue Certainty="33" Level="CriticalError">'UIAHelper.GetDesktopScreenshot(string)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'GetUIAControlCommand.ProcessRecord()'</Issue>
             <Issue Certainty="33" Level="CriticalError">'UIAHelper.GetDesktopScreenshot(string)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'GetUIAScreenshotCommand.ProcessRecord()'</Issue>
             <Issue Certainty="33" Level="CriticalError">'UIAHelper.GetDesktopScreenshot(string)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.BeginProcessing()'</Issue>
             <Issue Certainty="33" Level="CriticalError">'UIAHelper.GetDesktopScreenshot(string)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.checkTimeout(AutomationElement, bool)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.GetWindow(string, string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.BeginProcessing()'</Issue>
             <Issue Certainty="33" Level="CriticalError">'UIAHelper.GetDesktopScreenshot(string)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'UIAHelper.GetDesktopScreenshot(string)'&#xD;&#xA;   -&gt;'WaitUIAControlIsEnabledCommand.ProcessRecord()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDesktopWindow()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UIAHelper.GetDesktopWindow()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetElementPatternsFromPoint()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'UIAHelper.GetElementPatternsFromPoint()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetOutputStringUsingItemsValuePattern(System.Windows.Automation.AutomationElement,System.Char)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.GetOutputStringUsingItemsValuePattern(AutomationElement, char)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPatternByName(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Replace(System.String,System.String)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="StringCreation" Certainty="95" Level="Warning">'UIAHelper.GetPatternByName(string)' calls 'string.Replace(string, string)' but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTimedFileName()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetTimedFileName()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetTimedFileName()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetTimedFileName()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetTimedFileName()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetTimedFileName()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetTimedFileName()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UIAHelper.GetTimedFileName()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowDC(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UIAHelper.GetWindowDC(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#processingElement(UIAutomation.TranscriptCmdletBase,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.processingElement(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.processingElement(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.processingElement(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.processingElement(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.processingElement(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.processingElement(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.processingElement(TranscriptCmdletBase, AutomationElement)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessingTranscriptOnce(UIAutomation.TranscriptCmdletBase,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.ProcessingTranscriptOnce(TranscriptCmdletBase, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReleaseDC(System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UIAHelper.ReleaseDC(IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UIAHelper.ReleaseDC(IntPtr, IntPtr)' will be 8 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'IntPtr'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(System.IntPtr,System.Int32,System.IntPtr,UIAutomation.UIAHelper+DrawingOptions)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UIAHelper.SendMessage(IntPtr, int, IntPtr, UIAHelper.DrawingOptions)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'opts' of P/Invoke 'UIAHelper.SendMessage(IntPtr, int, IntPtr, UIAHelper.DrawingOptions)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'UIAHelper.DrawingOptions'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UIAHelper.SendMessage(IntPtr, int, IntPtr, UIAHelper.DrawingOptions)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#subscribeEvents(UIAutomation.HasScriptBlockCmdletBase,System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationPattern[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.subscribeEvents(HasScriptBlockCmdletBase, AutomationElement, AutomationPattern[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.subscribeEvents(HasScriptBlockCmdletBase, AutomationElement, AutomationPattern[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.subscribeEvents(HasScriptBlockCmdletBase, AutomationElement, AutomationPattern[])' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.subscribeEvents(HasScriptBlockCmdletBase, AutomationElement, AutomationPattern[])' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#unsubscribeEvents(UIAutomation.TranscriptCmdletBase)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UIAHelper.unsubscribeEvents(TranscriptCmdletBase)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ULtraGridCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ifUltraGridProcessing(UIAutomation.ifUltraGridOperations)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'ULtraGridCmdletBase.ifUltraGridProcessing(ifUltraGridOperations)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'ULtraGridCmdletBase.ifUltraGridProcessing(ifUltraGridOperations)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'ULtraGridCmdletBase.ifUltraGridProcessing(ifUltraGridOperations)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ItemName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ULtraGridCmdletBase.ItemName' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WaitCmdletBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning">'WaitCmdletBase.WaitCmdletBase()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;WaitCmdletBase..ctor()&#xD;&#xA;HasControlInputCmdletBase.set_InputObject(AutomationElement):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="UIAutomation.Commands">
       <Types>
        <Type Name="AddUIAWizardStepCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'AddUIAWizardStepCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConvertFromUIADataGridCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'ConvertFromUIADataGridCommand.ProcessRecord()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'ConvertFromUIADataGridCommand.ProcessRecord()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConvertFromUIAListCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'ConvertFromUIAListCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConvertFromUIATableCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'ConvertFromUIATableCommand.ProcessRecord()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'ConvertFromUIATableCommand.ProcessRecord()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIAControlChildrenCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Seconds" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Seconds()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlChildrenCommand.Seconds.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlChildrenCommand.Seconds.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Seconds(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlChildrenCommand.Seconds.set(int)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlChildrenCommand.Seconds.set(int)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Timeout" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Timeout()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlChildrenCommand.Timeout.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlChildrenCommand.Timeout.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Timeout(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlChildrenCommand.Timeout.set(int)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlChildrenCommand.Timeout.set(int)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Wait" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Wait()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlChildrenCommand.Wait.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Wait(System.Management.Automation.SwitchParameter)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlChildrenCommand.Wait.set(SwitchParameter)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIAControlCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_processName" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'GetUIAControlCommand._processName' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_windowName" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'GetUIAControlCommand._windowName' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BeginProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAControlCommand.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAControlCommand.ProcessRecord()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError">'GetUIAControlCommand.ProcessRecord()' calls into 'Process.GetProcessById(int)' which has a LinkDemand. By making this call, 'Process.GetProcessById(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'GetUIAControlCommand.ProcessRecord()'&#xD;&#xA;   -&gt;'GetUIAControlCommand.ProcessRecord()'</Issue>
             <Issue Certainty="33" Level="CriticalError">'GetUIAControlCommand.ProcessRecord()' calls into 'Process.StartInfo.get()' which has a LinkDemand. By making this call, 'Process.StartInfo.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'GetUIAControlCommand.ProcessRecord()'&#xD;&#xA;   -&gt;'GetUIAControlCommand.ProcessRecord()'</Issue>
             <Issue Certainty="33" Level="CriticalError">'GetUIAControlCommand.ProcessRecord()' calls into 'ProcessStartInfo.FileName.get()' which has a LinkDemand. By making this call, 'ProcessStartInfo.FileName.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'GetUIAControlCommand.ProcessRecord()'&#xD;&#xA;   -&gt;'GetUIAControlCommand.ProcessRecord()'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIAControlContextMenuCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAControlContextMenuCommand.ProcessRecord()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'GetUIAControlContextMenuCommand.ProcessRecord()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAControlContextMenuCommand.ProcessRecord()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAControlContextMenuCommand.ProcessRecord()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAControlContextMenuCommand.ProcessRecord()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAControlContextMenuCommand.ProcessRecord()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIAControlDescendantsCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Seconds" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Seconds()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlDescendantsCommand.Seconds.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlDescendantsCommand.Seconds.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Seconds(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlDescendantsCommand.Seconds.set(int)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlDescendantsCommand.Seconds.set(int)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Timeout" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Timeout()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlDescendantsCommand.Timeout.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlDescendantsCommand.Timeout.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Timeout(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlDescendantsCommand.Timeout.set(int)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAControlDescendantsCommand.Timeout.set(int)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasTimeoutCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Wait" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Wait()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlDescendantsCommand.Wait.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Wait(System.Management.Automation.SwitchParameter)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAControlDescendantsCommand.Wait.set(SwitchParameter)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIAControlsCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'GetUIAControlsCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAControlsCommand.ProcessRecord()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAControlsCommand.ProcessRecord()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAControlsCommand.ProcessRecord()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator !=(string, string)' in 'GetUIAControlsCommand.ProcessRecord()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator !=(string, string)' in 'GetUIAControlsCommand.ProcessRecord()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIACurrentPatternCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIACurrentPatternCommand.ProcessRecord()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIAWindowCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BeginProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowCommand.BeginProcessing()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowCommand.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator ==(string, string)' in 'GetUIAWindowCommand.BeginProcessing()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator ==(string, string)' in 'GetUIAWindowCommand.BeginProcessing()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#checkTimeout(System.Windows.Automation.AutomationElement,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowCommand.checkTimeout(AutomationElement, bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'GetUIAWindowCommand.checkTimeout(AutomationElement, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="fromCmdlet" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Parameter 'fromCmdlet' of 'GetUIAWindowCommand.checkTimeout(AutomationElement, bool)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindWindowByCaption(System.IntPtr,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'GetUIAWindowCommand.FindWindowByCaption(IntPtr, string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpWindowName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindow(System.String,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowCommand.GetWindow(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getWindowByProcessName(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowCommand.getWindowByProcessName(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowCommand.getWindowByProcessName(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError">'GetUIAWindowCommand.getWindowByProcessName(string)' calls into 'Process.GetProcessesByName(string)' which has a LinkDemand. By making this call, 'Process.GetProcessesByName(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'GetUIAWindowCommand.getWindowByProcessName(string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.getWindowByProcessName(string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.GetWindow(string, string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.BeginProcessing()'</Issue>
             <Issue Certainty="33" Level="CriticalError">'GetUIAWindowCommand.getWindowByProcessName(string)' calls into 'Process.Id.get()' which has a LinkDemand. By making this call, 'Process.Id.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'GetUIAWindowCommand.getWindowByProcessName(string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.getWindowByProcessName(string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.GetWindow(string, string)'&#xD;&#xA;   -&gt;'GetUIAWindowCommand.BeginProcessing()'</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowCommand.getWindowByProcessName(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowCommand.getWindowByProcessName(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowCommand.getWindowByProcessName(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowCommand.getWindowByProcessName(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetUIAWindowsCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'GetUIAWindowsCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BeginProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowsCommand.BeginProcessing()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowsCommand.BeginProcessing()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'GetUIAWindowsCommand.BeginProcessing()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowsCommand.BeginProcessing()' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowsCommand.BeginProcessing()' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowsCommand.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'GetUIAWindowsCommand.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator ==(string, string)' in 'GetUIAWindowsCommand.BeginProcessing()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning">Replace the call to 'string.operator ==(string, string)' in 'GetUIAWindowsCommand.BeginProcessing()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InvokeUIAControlClickCommmand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#X" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'InvokeUIAControlClickCommmand.X'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'InvokeUIAControlClickCommmand.Y'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InvokeUIASelectionItemPatternCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ItemName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'InvokeUIASelectionItemPatternCommand.ItemName' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'InvokeUIASelectionItemPatternCommand.ProcessRecord()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'InvokeUIASelectionItemPatternCommand.ProcessRecord()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MoveUIACursorCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#X" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'MoveUIACursorCommand.X'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'MoveUIACursorCommand.Y'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NewUIAWizardCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'NewUIAWizardCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RecorderForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#btnStop" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RecorderForm.btnStop' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="btnEdit" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'RecorderForm' contains field 'RecorderForm.btnEdit' that is of IDisposable type: 'Button'. Change the Dispose method on 'RecorderForm' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="btnPause" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'RecorderForm' contains field 'RecorderForm.btnPause' that is of IDisposable type: 'Button'. Change the Dispose method on 'RecorderForm' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="btnStart" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'RecorderForm' contains field 'RecorderForm.btnStart' that is of IDisposable type: 'Button'. Change the Dispose method on 'RecorderForm' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="btnStop" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'RecorderForm' contains field 'RecorderForm.btnStop' that is of IDisposable type: 'Button'. Change the Dispose method on 'RecorderForm' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="btnWatch" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'RecorderForm' contains field 'RecorderForm.btnWatch' that is of IDisposable type: 'Button'. Change the Dispose method on 'RecorderForm' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FrmRecorderFormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Change 'RecorderForm.FrmRecorderFormClosing(object, FormClosingEventArgs)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#pauseRecording(UIAutomation.TranscriptCmdletBase)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Change 'RecorderForm.pauseRecording(TranscriptCmdletBase)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#stopRecording(UIAutomation.TranscriptCmdletBase)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Change 'RecorderForm.stopRecording(TranscriptCmdletBase)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RemoveUIAWizardStepCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'RemoveUIAWizardStepCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SetUIAControlTextCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'SetUIAControlTextCommand.ProcessRecord()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage1(System.IntPtr,System.UInt32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'SetUIAControlTextCommand.SendMessage1(IntPtr, uint, int, int)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'SetUIAControlTextCommand.SendMessage1(IntPtr, uint, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'SetUIAControlTextCommand.SendMessage1(IntPtr, uint, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'lParam' of P/Invoke 'SetUIAControlTextCommand.SendMessage1(IntPtr, uint, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'SetUIAControlTextCommand.SendMessage1(IntPtr, uint, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'bool'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SetUIAWizardCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'SetUIAWizardCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="StartUIATranscriptCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BeginProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'StartUIATranscriptCommand.BeginProcessing()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EndProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'StartUIATranscriptCommand.EndProcessing()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'StartUIATranscriptCommand.EndProcessing()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'StartUIATranscriptCommand.EndProcessing()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError">'StartUIATranscriptCommand.EndProcessing()' calls into 'Process.Start(string, string)' which has a LinkDemand. By making this call, 'Process.Start(string, string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'StartUIATranscriptCommand.EndProcessing()'&#xD;&#xA;   -&gt;'StartUIATranscriptCommand.EndProcessing()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getControlTypeNameOfAutomationElement(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'StartUIATranscriptCommand.getControlTypeNameOfAutomationElement(AutomationElement, AutomationElement)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="System.String.Substring(System.Int32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Name="StringCreation" Certainty="95" Level="Warning">'StartUIATranscriptCommand.getControlTypeNameOfAutomationElement(AutomationElement, AutomationElement)' calls 'string.Substring(int)' but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">The 'this' parameter (or 'Me' in Visual Basic) of 'StartUIATranscriptCommand.getControlTypeNameOfAutomationElement(AutomationElement, AutomationElement)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#writeHeader(System.IO.StreamWriter&amp;,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'StartUIATranscriptCommand.writeHeader(ref StreamWriter, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StepUIAWizardCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'StepUIAWizardCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="StopUIARecorderCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'StopUIARecorderCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UnregisterUIAEventCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BeginProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'UnregisterUIAEventCommand.BeginProcessing()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InputObject" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_InputObject()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'UnregisterUIAEventCommand.InputObject.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_InputObject(System.Windows.Automation.AutomationElement)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'UnregisterUIAEventCommand.InputObject.set(AutomationElement)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'UnregisterUIAEventCommand.InputObject.set(AutomationElement)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PassThru" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_PassThru()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'UnregisterUIAEventCommand.PassThru.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'UnregisterUIAEventCommand.PassThru.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_PassThru(System.Management.Automation.SwitchParameter)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'UnregisterUIAEventCommand.PassThru.set(SwitchParameter)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'UnregisterUIAEventCommand.PassThru.set(SwitchParameter)' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'HasControlInputCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="WaitUIAControlIsEnabledCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BeginProcessing()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'WaitUIAControlIsEnabledCommand.BeginProcessing()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'WaitUIAControlIsEnabledCommand.BeginProcessing()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessRecord()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'WaitUIAControlIsEnabledCommand.ProcessRecord()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'WaitUIAControlIsEnabledCommand.ProcessRecord()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'WaitUIAControlIsEnabledCommand.ProcessRecord()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'WaitUIAControlIsEnabledCommand.ProcessRecord()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'WaitUIAControlIsEnabledCommand.ProcessRecord()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="UIAutomation.Commands.Common">
       <Types>
        <Type Name="InvokeUIAScriptCommand" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'InvokeUIAScriptCommand' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="UIAutomation.Commands.Pattern">
       <Types>
        <Type Name="GetUIAifUltraGridSelectionCommand" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ItemName" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ItemName()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAifUltraGridSelectionCommand.ItemName.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAifUltraGridSelectionCommand.ItemName.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'ULtraGridCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_ItemName(System.String[])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning">'GetUIAifUltraGridSelectionCommand.ItemName.set(string[])' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2012-02-10 21:10:09Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error">Make 'GetUIAifUltraGridSelectionCommand.ItemName.set(string[])' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'ULtraGridCmdletBase'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182127(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182130(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182264(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182265(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms245042(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
   <Name>Call GC.SuppressFinalize correctly</Name>
   <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
   <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182269(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182327(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/3hk32yyz(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182328(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182331(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182271(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182137(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182141(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222">
   <Name>Do not decrease inherited member visibility</Name>
   <Description>It is incorrect to override a public method from an inherited class with a private implementation, unless the type is sealed or the method is marked final. It is considered bad form to hide a method signature halfway down an inheritance tree.</Description>
   <Resolution Name="Default">Make {0} non-private, mark it as final, or seal its declaring type. This method was originally defined in base class {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182332(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182142(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="HResultOrErrorCode">{0} calls {1} but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Resolution>
   <Resolution Name="ObjectCreation">{0} creates a new instance of {1} which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Resolution>
   <Resolution Name="StringCreation">{0} calls {1} but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182273(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182303(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805">
   <Name>Do not initialize unnecessarily</Name>
   <Description>Do not make initializations that have already been done by the runtime.</Description>
   <Resolution Name="Default">{0} initializes field {1} of type {2} to {3}. Remove this initialization because it will be done automatically by the runtime.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182274(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182338(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182240(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="MemberMoreMeaningfulName">Consider providing a more meaningful name than member name {0}.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/bb264492(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182234(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182245(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms244737(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182156(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/bb385967(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414">
   <Name>Mark boolean P/Invoke arguments with MarshalAs</Name>
   <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
   <Resolution Name="Return">Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182206(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="InteroperabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms245046(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182161(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182162(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182354(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182276(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901">
   <Name>P/Invoke declarations should be portable</Name>
   <Description>.</Description>
   <Resolution Name="Parameter">As it is declared in your code, parameter {0} of P/Invoke {1} will be {2} bytes wide on {3} platforms. This is not correct, as the actual native declaration of this API indicates it should be {4} bytes wide on {3} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {5}.</Resolution>
   <Resolution Name="Return">As it is declared in your code, the return type of P/Invoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {4}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182284(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="PortabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182209(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="InteroperabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/0fss9skc(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182268(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109">
   <Name>Review visible event handlers</Name>
   <Description>It appears that an event handler is externally visible or that an EventArgs parameter is being exposed in a visible method decorated with a security demand. There can be problems exposing sensitive functionality in an event handler function; the security demand might not do what you expect.</Description>
   <Resolution Name="Default">Consider making {0} not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182312(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="40">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182189(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182190(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="Parameter">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182319(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182191(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182279(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberParameterNoAlternate">In member {0}, replace the term '{1}' in parameter name {2} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182258(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182181(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
 <Exceptions>
  <Exception Keyword="CA0060" Kind="Engine" TreatAsWarning="True">
   <Type>Microsoft.FxCop.Sdk.FxCopException</Type>
   <ExceptionMessage>The indirectly-referenced assembly 'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' could not be found. This assembly is not required for analysis, however, analysis results could be incomplete. This assembly was referenced by: 'UIAutomationClient.dll'.</ExceptionMessage>
  </Exception>
  <Exception Keyword="CA0060" Kind="Engine" TreatAsWarning="True">
   <Type>Microsoft.FxCop.Sdk.FxCopException</Type>
   <ExceptionMessage>The indirectly-referenced assembly 'System.Transactions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' could not be found. This assembly is not required for analysis, however, analysis results could be incomplete. This assembly was referenced by: 'System.Management.Automation.dll'.</ExceptionMessage>
  </Exception>
 </Exceptions>
</FxCopReport>
